/* tslint:disable */
/* eslint-disable */
/**
 * Toteco Service
 * Toteco API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponse } from '../models';
import { Publication } from '../models';
import { PublicationDTO } from '../models';
/**
 * PublicationsApi - axios parameter creator
 * @export
 */
export const PublicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete publication
         * @param {string} id Publication ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling delete1.');
            }
            const localVarPath = `/publications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete all publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get publication by establishment
         * @param {string} id Establishment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEstablishment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getByEstablishment.');
            }
            const localVarPath = `/publications/establishment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get publication by ID
         * @param {string} id Publication ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById1: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getById1.');
            }
            const localVarPath = `/publications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get publication by user
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getByUser.');
            }
            const localVarPath = `/publications/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save publication
         * @param {PublicationDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save1: async (body: PublicationDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling save1.');
            }
            const localVarPath = `/publications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update publication
         * @param {PublicationDTO} body 
         * @param {string} id Publication ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: async (body: PublicationDTO, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update1.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling update1.');
            }
            const localVarPath = `/publications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicationsApi - functional programming interface
 * @export
 */
export const PublicationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete publication
         * @param {string} id Publication ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Publication>>> {
            const localVarAxiosArgs = await PublicationsApiAxiosParamCreator(configuration).delete1(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete all publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PublicationsApiAxiosParamCreator(configuration).deleteAll1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationsApiAxiosParamCreator(configuration).getAll1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get publication by establishment
         * @param {string} id Establishment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEstablishment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationsApiAxiosParamCreator(configuration).getByEstablishment(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get publication by ID
         * @param {string} id Publication ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById1(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Publication>>> {
            const localVarAxiosArgs = await PublicationsApiAxiosParamCreator(configuration).getById1(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get publication by user
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationsApiAxiosParamCreator(configuration).getByUser(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save publication
         * @param {PublicationDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save1(body: PublicationDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Publication>>> {
            const localVarAxiosArgs = await PublicationsApiAxiosParamCreator(configuration).save1(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update publication
         * @param {PublicationDTO} body 
         * @param {string} id Publication ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(body: PublicationDTO, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PublicationsApiAxiosParamCreator(configuration).update1(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PublicationsApi - factory interface
 * @export
 */
export const PublicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete publication
         * @param {string} id Publication ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Publication>> {
            return PublicationsApiFp(configuration).delete1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete all publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll1(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PublicationsApiFp(configuration).deleteAll1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll1(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationsApiFp(configuration).getAll1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get publication by establishment
         * @param {string} id Establishment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEstablishment(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationsApiFp(configuration).getByEstablishment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get publication by ID
         * @param {string} id Publication ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById1(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Publication>> {
            return PublicationsApiFp(configuration).getById1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get publication by user
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByUser(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationsApiFp(configuration).getByUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save publication
         * @param {PublicationDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save1(body: PublicationDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Publication>> {
            return PublicationsApiFp(configuration).save1(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update publication
         * @param {PublicationDTO} body 
         * @param {string} id Publication ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(body: PublicationDTO, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PublicationsApiFp(configuration).update1(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicationsApi - object-oriented interface
 * @export
 * @class PublicationsApi
 * @extends {BaseAPI}
 */
export class PublicationsApi extends BaseAPI {
    /**
     * 
     * @summary Delete publication
     * @param {string} id Publication ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationsApi
     */
    public async delete1(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Publication>> {
        return PublicationsApiFp(this.configuration).delete1(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete all publications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationsApi
     */
    public async deleteAll1(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PublicationsApiFp(this.configuration).deleteAll1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all publications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationsApi
     */
    public async getAll1(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationsApiFp(this.configuration).getAll1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get publication by establishment
     * @param {string} id Establishment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationsApi
     */
    public async getByEstablishment(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationsApiFp(this.configuration).getByEstablishment(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get publication by ID
     * @param {string} id Publication ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationsApi
     */
    public async getById1(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Publication>> {
        return PublicationsApiFp(this.configuration).getById1(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get publication by user
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationsApi
     */
    public async getByUser(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationsApiFp(this.configuration).getByUser(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Save publication
     * @param {PublicationDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationsApi
     */
    public async save1(body: PublicationDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Publication>> {
        return PublicationsApiFp(this.configuration).save1(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update publication
     * @param {PublicationDTO} body 
     * @param {string} id Publication ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationsApi
     */
    public async update1(body: PublicationDTO, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PublicationsApiFp(this.configuration).update1(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
