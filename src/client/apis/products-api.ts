/* tslint:disable */
/* eslint-disable */
/**
 * TOTECO API
 * API to manage publications about products (coffee, tea or toast) like a social media. The idea is to create a community that publishes photos of their toasts with coffee or tea adding the price and being able to rate the products and the establishments.
 *
 * OpenAPI spec version: 1.0
 * Contact: a25540@svalero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Exception } from '../models';
import { Product } from '../models';
import { ProductDTO } from '../models';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete all the products from the DDBB.
         * @summary Delete all the products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllProducts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete all the products in the DDBB
         * @summary Delete all the products
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProductById.');
            }
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the products in the DDBB.
         * @summary Get all the products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an existing product by the id
         * @summary Get a product
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductById.');
            }
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the products which have this creation date. The date format is timestamp in miliseconds.
         * @summary Get products by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByDate: async (date: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling getProductsByDate.');
            }
            const localVarPath = `/products/date/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the products which have the creation date between theese. The dates format is timestamp in miliseconds
         * @summary Get products between dates
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByDateBetween: async (minDate: number, maxDate: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minDate' is not null or undefined
            if (minDate === null || minDate === undefined) {
                throw new RequiredError('minDate','Required parameter minDate was null or undefined when calling getProductsByDateBetween.');
            }
            // verify required parameter 'maxDate' is not null or undefined
            if (maxDate === null || maxDate === undefined) {
                throw new RequiredError('maxDate','Required parameter maxDate was null or undefined when calling getProductsByDateBetween.');
            }
            const localVarPath = `/products/date/between`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minDate !== undefined) {
                localVarQueryParameter['minDate'] = minDate;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['maxDate'] = maxDate;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the products which are part of any menu or get all the products that are not par of any menu.
         * @summary Get products which belongs (or not) to menus
         * @param {boolean} inMenu If want the products that belong to menus write true, if not write false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByInMenu: async (inMenu: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inMenu' is not null or undefined
            if (inMenu === null || inMenu === undefined) {
                throw new RequiredError('inMenu','Required parameter inMenu was null or undefined when calling getProductsByInMenu.');
            }
            const localVarPath = `/products/inMenu/{inMenu}`
                .replace(`{${"inMenu"}}`, encodeURIComponent(String(inMenu)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the products that belongs to this menu by the id
         * @summary Get products by menu id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByMenuId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductsByMenuId.');
            }
            const localVarPath = `/products/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the products which have this same price.
         * @summary Get all products by price
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByPrice: async (price: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'price' is not null or undefined
            if (price === null || price === undefined) {
                throw new RequiredError('price','Required parameter price was null or undefined when calling getProductsByPrice.');
            }
            const localVarPath = `/products/price/{price}`
                .replace(`{${"price"}}`, encodeURIComponent(String(price)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the products which prices are between theese two.
         * @summary Get products by price between
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByPriceBetween: async (minPrice: number, maxPrice: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minPrice' is not null or undefined
            if (minPrice === null || minPrice === undefined) {
                throw new RequiredError('minPrice','Required parameter minPrice was null or undefined when calling getProductsByPriceBetween.');
            }
            // verify required parameter 'maxPrice' is not null or undefined
            if (maxPrice === null || maxPrice === undefined) {
                throw new RequiredError('maxPrice','Required parameter maxPrice was null or undefined when calling getProductsByPriceBetween.');
            }
            const localVarPath = `/products/price/between`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minPrice !== undefined) {
                localVarQueryParameter['minPrice'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['maxPrice'] = maxPrice;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the products that belongs to this publication by the id
         * @summary Get products by publication id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByPublicationId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductsByPublicationId.');
            }
            const localVarPath = `/products/publication/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the products which have this same score. The score goes from 0 to 5.
         * @summary Get all products by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByScore: async (score: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'score' is not null or undefined
            if (score === null || score === undefined) {
                throw new RequiredError('score','Required parameter score was null or undefined when calling getProductsByScore.');
            }
            const localVarPath = `/products/score/{score}`
                .replace(`{${"score"}}`, encodeURIComponent(String(score)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the products which scores are between theese two. The score goes from 0 to 5.
         * @summary Get products by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByScoreBetween: async (minScore: number, maxScore: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minScore' is not null or undefined
            if (minScore === null || minScore === undefined) {
                throw new RequiredError('minScore','Required parameter minScore was null or undefined when calling getProductsByScoreBetween.');
            }
            // verify required parameter 'maxScore' is not null or undefined
            if (maxScore === null || maxScore === undefined) {
                throw new RequiredError('maxScore','Required parameter maxScore was null or undefined when calling getProductsByScoreBetween.');
            }
            const localVarPath = `/products/score/between/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minScore !== undefined) {
                localVarQueryParameter['minScore'] = minScore;
            }

            if (maxScore !== undefined) {
                localVarQueryParameter['maxScore'] = maxScore;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the products that belongs to this type by the id
         * @summary Get products by type id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByTypeId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductsByTypeId.');
            }
            const localVarPath = `/products/type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Save a new product in the DDBB.
         * @summary Post a new product
         * @param {ProductDTO} [body] product to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveProduct: async (body?: ProductDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing product
         * @summary Update product
         * @param {number} id id of the element
         * @param {ProductDTO} [body] product to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (id: number, body?: ProductDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateProduct.');
            }
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the price of the indicated product.
         * @summary Update product price
         * @param {number} id id of the element
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductsPrice: async (id: number, price: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateProductsPrice.');
            }
            // verify required parameter 'price' is not null or undefined
            if (price === null || price === undefined) {
                throw new RequiredError('price','Required parameter price was null or undefined when calling updateProductsPrice.');
            }
            const localVarPath = `/products/{id}/price/{price}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"price"}}`, encodeURIComponent(String(price)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the score of the indicated product.
         * @summary Update product score
         * @param {number} id id of the element
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductsScore: async (id: number, score: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateProductsScore.');
            }
            // verify required parameter 'score' is not null or undefined
            if (score === null || score === undefined) {
                throw new RequiredError('score','Required parameter score was null or undefined when calling updateProductsScore.');
            }
            const localVarPath = `/products/{id}/score/{score}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"score"}}`, encodeURIComponent(String(score)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete all the products from the DDBB.
         * @summary Delete all the products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllProducts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).deleteAllProducts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete all the products in the DDBB
         * @summary Delete all the products
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).deleteProductById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all the products in the DDBB.
         * @summary Get all the products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProducts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getAllProducts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an existing product by the id
         * @summary Get a product
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Product>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getProductById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all the products which have this creation date. The date format is timestamp in miliseconds.
         * @summary Get products by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByDate(date: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getProductsByDate(date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all the products which have the creation date between theese. The dates format is timestamp in miliseconds
         * @summary Get products between dates
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getProductsByDateBetween(minDate, maxDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all the products which are part of any menu or get all the products that are not par of any menu.
         * @summary Get products which belongs (or not) to menus
         * @param {boolean} inMenu If want the products that belong to menus write true, if not write false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByInMenu(inMenu: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getProductsByInMenu(inMenu, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the products that belongs to this menu by the id
         * @summary Get products by menu id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByMenuId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getProductsByMenuId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all the products which have this same price.
         * @summary Get all products by price
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByPrice(price: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getProductsByPrice(price, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all the products which prices are between theese two.
         * @summary Get products by price between
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByPriceBetween(minPrice: number, maxPrice: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getProductsByPriceBetween(minPrice, maxPrice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the products that belongs to this publication by the id
         * @summary Get products by publication id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByPublicationId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getProductsByPublicationId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all the products which have this same score. The score goes from 0 to 5.
         * @summary Get all products by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByScore(score: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getProductsByScore(score, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all the products which scores are between theese two. The score goes from 0 to 5.
         * @summary Get products by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getProductsByScoreBetween(minScore, maxScore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the products that belongs to this type by the id
         * @summary Get products by type id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByTypeId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).getProductsByTypeId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Save a new product in the DDBB.
         * @summary Post a new product
         * @param {ProductDTO} [body] product to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveProduct(body?: ProductDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Product>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).saveProduct(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing product
         * @summary Update product
         * @param {number} id id of the element
         * @param {ProductDTO} [body] product to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(id: number, body?: ProductDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Product>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).updateProduct(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the price of the indicated product.
         * @summary Update product price
         * @param {number} id id of the element
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductsPrice(id: number, price: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).updateProductsPrice(id, price, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the score of the indicated product.
         * @summary Update product score
         * @param {number} id id of the element
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductsScore(id: number, score: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Product>>>> {
            const localVarAxiosArgs = await ProductsApiAxiosParamCreator(configuration).updateProductsScore(id, score, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete all the products from the DDBB.
         * @summary Delete all the products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllProducts(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ProductsApiFp(configuration).deleteAllProducts(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete all the products in the DDBB
         * @summary Delete all the products
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductById(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ProductsApiFp(configuration).deleteProductById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the products in the DDBB.
         * @summary Get all the products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProducts(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).getAllProducts(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an existing product by the id
         * @summary Get a product
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductById(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Product>> {
            return ProductsApiFp(configuration).getProductById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the products which have this creation date. The date format is timestamp in miliseconds.
         * @summary Get products by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByDate(date: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).getProductsByDate(date, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the products which have the creation date between theese. The dates format is timestamp in miliseconds
         * @summary Get products between dates
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).getProductsByDateBetween(minDate, maxDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the products which are part of any menu or get all the products that are not par of any menu.
         * @summary Get products which belongs (or not) to menus
         * @param {boolean} inMenu If want the products that belong to menus write true, if not write false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByInMenu(inMenu: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).getProductsByInMenu(inMenu, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the products that belongs to this menu by the id
         * @summary Get products by menu id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByMenuId(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).getProductsByMenuId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the products which have this same price.
         * @summary Get all products by price
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByPrice(price: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).getProductsByPrice(price, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the products which prices are between theese two.
         * @summary Get products by price between
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByPriceBetween(minPrice: number, maxPrice: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).getProductsByPriceBetween(minPrice, maxPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the products that belongs to this publication by the id
         * @summary Get products by publication id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByPublicationId(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).getProductsByPublicationId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the products which have this same score. The score goes from 0 to 5.
         * @summary Get all products by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByScore(score: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).getProductsByScore(score, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the products which scores are between theese two. The score goes from 0 to 5.
         * @summary Get products by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).getProductsByScoreBetween(minScore, maxScore, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the products that belongs to this type by the id
         * @summary Get products by type id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByTypeId(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).getProductsByTypeId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Save a new product in the DDBB.
         * @summary Post a new product
         * @param {ProductDTO} [body] product to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveProduct(body?: ProductDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Product>> {
            return ProductsApiFp(configuration).saveProduct(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing product
         * @summary Update product
         * @param {number} id id of the element
         * @param {ProductDTO} [body] product to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(id: number, body?: ProductDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Product>> {
            return ProductsApiFp(configuration).updateProduct(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the price of the indicated product.
         * @summary Update product price
         * @param {number} id id of the element
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductsPrice(id: number, price: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).updateProductsPrice(id, price, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the score of the indicated product.
         * @summary Update product score
         * @param {number} id id of the element
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductsScore(id: number, score: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Product>>> {
            return ProductsApiFp(configuration).updateProductsScore(id, score, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Delete all the products from the DDBB.
     * @summary Delete all the products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async deleteAllProducts(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ProductsApiFp(this.configuration).deleteAllProducts(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete all the products in the DDBB
     * @summary Delete all the products
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async deleteProductById(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ProductsApiFp(this.configuration).deleteProductById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the products in the DDBB.
     * @summary Get all the products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getAllProducts(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).getAllProducts(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an existing product by the id
     * @summary Get a product
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getProductById(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Product>> {
        return ProductsApiFp(this.configuration).getProductById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the products which have this creation date. The date format is timestamp in miliseconds.
     * @summary Get products by date
     * @param {number} date creation date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getProductsByDate(date: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).getProductsByDate(date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the products which have the creation date between theese. The dates format is timestamp in miliseconds
     * @summary Get products between dates
     * @param {number} minDate date from in timestamp miliseconds
     * @param {number} maxDate date to in timestamp miliseconds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getProductsByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).getProductsByDateBetween(minDate, maxDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the products which are part of any menu or get all the products that are not par of any menu.
     * @summary Get products which belongs (or not) to menus
     * @param {boolean} inMenu If want the products that belong to menus write true, if not write false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getProductsByInMenu(inMenu: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).getProductsByInMenu(inMenu, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the products that belongs to this menu by the id
     * @summary Get products by menu id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getProductsByMenuId(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).getProductsByMenuId(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the products which have this same price.
     * @summary Get all products by price
     * @param {number} price 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getProductsByPrice(price: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).getProductsByPrice(price, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the products which prices are between theese two.
     * @summary Get products by price between
     * @param {number} minPrice 
     * @param {number} maxPrice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getProductsByPriceBetween(minPrice: number, maxPrice: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).getProductsByPriceBetween(minPrice, maxPrice, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the products that belongs to this publication by the id
     * @summary Get products by publication id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getProductsByPublicationId(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).getProductsByPublicationId(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the products which have this same score. The score goes from 0 to 5.
     * @summary Get all products by score
     * @param {number} score 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getProductsByScore(score: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).getProductsByScore(score, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the products which scores are between theese two. The score goes from 0 to 5.
     * @summary Get products by score between
     * @param {number} minScore 
     * @param {number} maxScore 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getProductsByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).getProductsByScoreBetween(minScore, maxScore, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the products that belongs to this type by the id
     * @summary Get products by type id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async getProductsByTypeId(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).getProductsByTypeId(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Save a new product in the DDBB.
     * @summary Post a new product
     * @param {ProductDTO} [body] product to save
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async saveProduct(body?: ProductDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Product>> {
        return ProductsApiFp(this.configuration).saveProduct(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing product
     * @summary Update product
     * @param {number} id id of the element
     * @param {ProductDTO} [body] product to save
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async updateProduct(id: number, body?: ProductDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Product>> {
        return ProductsApiFp(this.configuration).updateProduct(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the price of the indicated product.
     * @summary Update product price
     * @param {number} id id of the element
     * @param {number} price 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async updateProductsPrice(id: number, price: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).updateProductsPrice(id, price, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the score of the indicated product.
     * @summary Update product score
     * @param {number} id id of the element
     * @param {number} score 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public async updateProductsScore(id: number, score: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Product>>> {
        return ProductsApiFp(this.configuration).updateProductsScore(id, score, options).then((request) => request(this.axios, this.basePath));
    }
}
