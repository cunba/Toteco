/* tslint:disable */
/* eslint-disable */
/**
 * Toteco Service
 * Toteco API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: ire.cunba@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponse } from '../models';
import { Menu } from '../models';
import { MenuDTO } from '../models';
/**
 * MenusApi - axios parameter creator
 * @export
 */
export const MenusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete menu
         * @param {string} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling delete3.');
            }
            const localVarPath = `/menus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete all menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll3: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll3: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get menu by ID
         * @param {string} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById3: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getById3.');
            }
            const localVarPath = `/menus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save menu
         * @param {MenuDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save3: async (body: MenuDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling save3.');
            }
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update menu
         * @param {MenuDTO} body 
         * @param {string} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3: async (body: MenuDTO, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update3.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling update3.');
            }
            const localVarPath = `/menus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenusApi - functional programming interface
 * @export
 */
export const MenusApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete menu
         * @param {string} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete3(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Menu>>> {
            const localVarAxiosArgs = await MenusApiAxiosParamCreator(configuration).delete3(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete all menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll3(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await MenusApiAxiosParamCreator(configuration).deleteAll3(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll3(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Menu>>>> {
            const localVarAxiosArgs = await MenusApiAxiosParamCreator(configuration).getAll3(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get menu by ID
         * @param {string} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById3(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Menu>>> {
            const localVarAxiosArgs = await MenusApiAxiosParamCreator(configuration).getById3(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save menu
         * @param {MenuDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save3(body: MenuDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Menu>>> {
            const localVarAxiosArgs = await MenusApiAxiosParamCreator(configuration).save3(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update menu
         * @param {MenuDTO} body 
         * @param {string} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update3(body: MenuDTO, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await MenusApiAxiosParamCreator(configuration).update3(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MenusApi - factory interface
 * @export
 */
export const MenusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete menu
         * @param {string} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete3(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Menu>> {
            return MenusApiFp(configuration).delete3(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete all menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll3(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return MenusApiFp(configuration).deleteAll3(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll3(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Menu>>> {
            return MenusApiFp(configuration).getAll3(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get menu by ID
         * @param {string} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById3(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Menu>> {
            return MenusApiFp(configuration).getById3(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save menu
         * @param {MenuDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save3(body: MenuDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Menu>> {
            return MenusApiFp(configuration).save3(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update menu
         * @param {MenuDTO} body 
         * @param {string} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update3(body: MenuDTO, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return MenusApiFp(configuration).update3(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenusApi - object-oriented interface
 * @export
 * @class MenusApi
 * @extends {BaseAPI}
 */
export class MenusApi extends BaseAPI {
    /**
     * 
     * @summary Delete menu
     * @param {string} id Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public async delete3(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Menu>> {
        return MenusApiFp(this.configuration).delete3(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete all menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public async deleteAll3(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return MenusApiFp(this.configuration).deleteAll3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public async getAll3(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Menu>>> {
        return MenusApiFp(this.configuration).getAll3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get menu by ID
     * @param {string} id Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public async getById3(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Menu>> {
        return MenusApiFp(this.configuration).getById3(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Save menu
     * @param {MenuDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public async save3(body: MenuDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Menu>> {
        return MenusApiFp(this.configuration).save3(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update menu
     * @param {MenuDTO} body 
     * @param {string} id Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public async update3(body: MenuDTO, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return MenusApiFp(this.configuration).update3(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
