/* tslint:disable */
/* eslint-disable */
/**
 * TOTECO API
 * API to manage publications about products (coffee, tea or toast) like a social media. The idea is to create a community that publishes photos of their toasts with coffee or tea adding the price and being able to rate the products and the establishments.
 *
 * OpenAPI spec version: 1.0
 * Contact: a25540@svalero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Exception } from '../models';
import { Type } from '../models';
import { TypeDTO } from '../models';
/**
 * ProductTypeApi - axios parameter creator
 * @export
 */
export const ProductTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete the type with the indicated id
         * @summary Delete one type
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteType: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteType.');
            }
            const localVarPath = `/types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete all types
         * @summary Delete all types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the types from the DDBB
         * @summary Get all types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get one type by the id
         * @summary Get type by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypeById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTypeById.');
            }
            const localVarPath = `/types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get types with the indicated name
         * @summary Get type by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypeByName: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getTypeByName.');
            }
            const localVarPath = `/types/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get types with the indicated name and type
         * @summary Get type by name and type
         * @param {string} name 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypeByNameAndType: async (name: string, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getTypeByNameAndType.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getTypeByNameAndType.');
            }
            const localVarPath = `/types/name/{name}/type/{type}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get types with the indicated type
         * @summary Get type by type
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypeByType: async (type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getTypeByType.');
            }
            const localVarPath = `/types/type/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Save a new product type into the DDBB
         * @summary Save a type
         * @param {TypeDTO} [body] product type to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveType: async (body?: TypeDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the type with the indicated id
         * @summary Update one type
         * @param {number} id id of the element
         * @param {TypeDTO} [body] type to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateType: async (id: number, body?: TypeDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateType.');
            }
            const localVarPath = `/types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductTypeApi - functional programming interface
 * @export
 */
export const ProductTypeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete the type with the indicated id
         * @summary Delete one type
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteType(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ProductTypeApiAxiosParamCreator(configuration).deleteType(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete all types
         * @summary Delete all types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ProductTypeApiAxiosParamCreator(configuration).deleteTypes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all the types from the DDBB
         * @summary Get all types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Type>>>> {
            const localVarAxiosArgs = await ProductTypeApiAxiosParamCreator(configuration).getAllTypes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get one type by the id
         * @summary Get type by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTypeById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Type>>> {
            const localVarAxiosArgs = await ProductTypeApiAxiosParamCreator(configuration).getTypeById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get types with the indicated name
         * @summary Get type by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTypeByName(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Type>>>> {
            const localVarAxiosArgs = await ProductTypeApiAxiosParamCreator(configuration).getTypeByName(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get types with the indicated name and type
         * @summary Get type by name and type
         * @param {string} name 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTypeByNameAndType(name: string, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Type>>>> {
            const localVarAxiosArgs = await ProductTypeApiAxiosParamCreator(configuration).getTypeByNameAndType(name, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get types with the indicated type
         * @summary Get type by type
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTypeByType(type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Type>>>> {
            const localVarAxiosArgs = await ProductTypeApiAxiosParamCreator(configuration).getTypeByType(type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Save a new product type into the DDBB
         * @summary Save a type
         * @param {TypeDTO} [body] product type to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveType(body?: TypeDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Type>>> {
            const localVarAxiosArgs = await ProductTypeApiAxiosParamCreator(configuration).saveType(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the type with the indicated id
         * @summary Update one type
         * @param {number} id id of the element
         * @param {TypeDTO} [body] type to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateType(id: number, body?: TypeDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Type>>> {
            const localVarAxiosArgs = await ProductTypeApiAxiosParamCreator(configuration).updateType(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductTypeApi - factory interface
 * @export
 */
export const ProductTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete the type with the indicated id
         * @summary Delete one type
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteType(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ProductTypeApiFp(configuration).deleteType(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete all types
         * @summary Delete all types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTypes(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ProductTypeApiFp(configuration).deleteTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the types from the DDBB
         * @summary Get all types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTypes(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Type>>> {
            return ProductTypeApiFp(configuration).getAllTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Get one type by the id
         * @summary Get type by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTypeById(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Type>> {
            return ProductTypeApiFp(configuration).getTypeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get types with the indicated name
         * @summary Get type by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTypeByName(name: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Type>>> {
            return ProductTypeApiFp(configuration).getTypeByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get types with the indicated name and type
         * @summary Get type by name and type
         * @param {string} name 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTypeByNameAndType(name: string, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Type>>> {
            return ProductTypeApiFp(configuration).getTypeByNameAndType(name, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Get types with the indicated type
         * @summary Get type by type
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTypeByType(type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Type>>> {
            return ProductTypeApiFp(configuration).getTypeByType(type, options).then((request) => request(axios, basePath));
        },
        /**
         * Save a new product type into the DDBB
         * @summary Save a type
         * @param {TypeDTO} [body] product type to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveType(body?: TypeDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Type>> {
            return ProductTypeApiFp(configuration).saveType(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the type with the indicated id
         * @summary Update one type
         * @param {number} id id of the element
         * @param {TypeDTO} [body] type to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateType(id: number, body?: TypeDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Type>> {
            return ProductTypeApiFp(configuration).updateType(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductTypeApi - object-oriented interface
 * @export
 * @class ProductTypeApi
 * @extends {BaseAPI}
 */
export class ProductTypeApi extends BaseAPI {
    /**
     * Delete the type with the indicated id
     * @summary Delete one type
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public async deleteType(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ProductTypeApiFp(this.configuration).deleteType(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete all types
     * @summary Delete all types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public async deleteTypes(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ProductTypeApiFp(this.configuration).deleteTypes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the types from the DDBB
     * @summary Get all types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public async getAllTypes(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Type>>> {
        return ProductTypeApiFp(this.configuration).getAllTypes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get one type by the id
     * @summary Get type by id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public async getTypeById(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Type>> {
        return ProductTypeApiFp(this.configuration).getTypeById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get types with the indicated name
     * @summary Get type by name
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public async getTypeByName(name: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Type>>> {
        return ProductTypeApiFp(this.configuration).getTypeByName(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get types with the indicated name and type
     * @summary Get type by name and type
     * @param {string} name 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public async getTypeByNameAndType(name: string, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Type>>> {
        return ProductTypeApiFp(this.configuration).getTypeByNameAndType(name, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get types with the indicated type
     * @summary Get type by type
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public async getTypeByType(type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Type>>> {
        return ProductTypeApiFp(this.configuration).getTypeByType(type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Save a new product type into the DDBB
     * @summary Save a type
     * @param {TypeDTO} [body] product type to save
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public async saveType(body?: TypeDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Type>> {
        return ProductTypeApiFp(this.configuration).saveType(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the type with the indicated id
     * @summary Update one type
     * @param {number} id id of the element
     * @param {TypeDTO} [body] type to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public async updateType(id: number, body?: TypeDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Type>> {
        return ProductTypeApiFp(this.configuration).updateType(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
