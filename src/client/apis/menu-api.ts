/* tslint:disable */
/* eslint-disable */
/**
 * TOTECO API
 * API to manage publications about products (coffee, tea or toast) like a social media. The idea is to create a community that publishes photos of their toasts with coffee or tea adding the price and being able to rate the products and the establishments.
 *
 * OpenAPI spec version: 1.0
 * Contact: a25540@svalero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Exception } from '../models';
import { Menu } from '../models';
import { MenuDTO } from '../models';
/**
 * MenuApi - axios parameter creator
 * @export
 */
export const MenuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete all menus
         * @summary Delete menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllMenus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing menu
         * @summary Delete menu by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteMenu.');
            }
            const localVarPath = `/menus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all menus
         * @summary Get all menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMenus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get menus created at the indicated date. The date format is timestamp in miliseconds
         * @summary Get menu by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuByDate: async (date: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling getMenuByDate.');
            }
            const localVarPath = `/menus/date/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get menus created at the indicated dates. The dates format is timestamp in miliseconds
         * @summary Get menu by date between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuByDateBetween: async (minDate: number, maxDate: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minDate' is not null or undefined
            if (minDate === null || minDate === undefined) {
                throw new RequiredError('minDate','Required parameter minDate was null or undefined when calling getMenuByDateBetween.');
            }
            // verify required parameter 'maxDate' is not null or undefined
            if (maxDate === null || maxDate === undefined) {
                throw new RequiredError('maxDate','Required parameter maxDate was null or undefined when calling getMenuByDateBetween.');
            }
            const localVarPath = `/menus/date/between`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minDate !== undefined) {
                localVarQueryParameter['minDate'] = minDate;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['maxDate'] = maxDate;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get one menu by the indicated id
         * @summary Get menu by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMenuById.');
            }
            const localVarPath = `/menus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get menus with the price indicated
         * @summary Get menu by price
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuByPrice: async (price: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'price' is not null or undefined
            if (price === null || price === undefined) {
                throw new RequiredError('price','Required parameter price was null or undefined when calling getMenuByPrice.');
            }
            const localVarPath = `/menus/price/{price}`
                .replace(`{${"price"}}`, encodeURIComponent(String(price)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get menus between the two prices indicated.
         * @summary Get menu by price between
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuByPriceBetween: async (minPrice: number, maxPrice: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minPrice' is not null or undefined
            if (minPrice === null || minPrice === undefined) {
                throw new RequiredError('minPrice','Required parameter minPrice was null or undefined when calling getMenuByPriceBetween.');
            }
            // verify required parameter 'maxPrice' is not null or undefined
            if (maxPrice === null || maxPrice === undefined) {
                throw new RequiredError('maxPrice','Required parameter maxPrice was null or undefined when calling getMenuByPriceBetween.');
            }
            const localVarPath = `/menus/price/between`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minPrice !== undefined) {
                localVarQueryParameter['minPrice'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['maxPrice'] = maxPrice;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get menus with the score indicated. The score goes from 0 to 5.
         * @summary Get menu by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuByScore: async (score: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'score' is not null or undefined
            if (score === null || score === undefined) {
                throw new RequiredError('score','Required parameter score was null or undefined when calling getMenuByScore.');
            }
            const localVarPath = `/menus/score/{score}`
                .replace(`{${"score"}}`, encodeURIComponent(String(score)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get menus between the two scores indicated. The score goes from 0 to 5.
         * @summary Get menu by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuByScoreBetween: async (minScore: number, maxScore: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minScore' is not null or undefined
            if (minScore === null || minScore === undefined) {
                throw new RequiredError('minScore','Required parameter minScore was null or undefined when calling getMenuByScoreBetween.');
            }
            // verify required parameter 'maxScore' is not null or undefined
            if (maxScore === null || maxScore === undefined) {
                throw new RequiredError('maxScore','Required parameter maxScore was null or undefined when calling getMenuByScoreBetween.');
            }
            const localVarPath = `/menus/score/between`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minScore !== undefined) {
                localVarQueryParameter['minScore'] = minScore;
            }

            if (maxScore !== undefined) {
                localVarQueryParameter['maxScore'] = maxScore;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one menu
         * @summary Save menu
         * @param {MenuDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveMenu: async (body?: MenuDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing menu
         * @summary Update menu
         * @param {number} id id of the element
         * @param {MenuDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMenu: async (id: number, body?: MenuDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateMenu.');
            }
            const localVarPath = `/menus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuApi - functional programming interface
 * @export
 */
export const MenuApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete all menus
         * @summary Delete menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllMenus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).deleteAllMenus(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an existing menu
         * @summary Delete menu by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMenu(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).deleteMenu(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all menus
         * @summary Get all menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMenus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Menu>>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).getAllMenus(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get menus created at the indicated date. The date format is timestamp in miliseconds
         * @summary Get menu by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByDate(date: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Menu>>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).getMenuByDate(date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get menus created at the indicated dates. The dates format is timestamp in miliseconds
         * @summary Get menu by date between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Menu>>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).getMenuByDateBetween(minDate, maxDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get one menu by the indicated id
         * @summary Get menu by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Menu>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).getMenuById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get menus with the price indicated
         * @summary Get menu by price
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByPrice(price: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Menu>>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).getMenuByPrice(price, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get menus between the two prices indicated.
         * @summary Get menu by price between
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByPriceBetween(minPrice: number, maxPrice: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Menu>>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).getMenuByPriceBetween(minPrice, maxPrice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get menus with the score indicated. The score goes from 0 to 5.
         * @summary Get menu by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByScore(score: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Menu>>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).getMenuByScore(score, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get menus between the two scores indicated. The score goes from 0 to 5.
         * @summary Get menu by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Menu>>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).getMenuByScoreBetween(minScore, maxScore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Save one menu
         * @summary Save menu
         * @param {MenuDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveMenu(body?: MenuDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Menu>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).saveMenu(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing menu
         * @summary Update menu
         * @param {number} id id of the element
         * @param {MenuDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMenu(id: number, body?: MenuDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Menu>>> {
            const localVarAxiosArgs = await MenuApiAxiosParamCreator(configuration).updateMenu(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MenuApi - factory interface
 * @export
 */
export const MenuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete all menus
         * @summary Delete menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllMenus(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return MenuApiFp(configuration).deleteAllMenus(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing menu
         * @summary Delete menu by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMenu(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return MenuApiFp(configuration).deleteMenu(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all menus
         * @summary Get all menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMenus(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Menu>>> {
            return MenuApiFp(configuration).getAllMenus(options).then((request) => request(axios, basePath));
        },
        /**
         * Get menus created at the indicated date. The date format is timestamp in miliseconds
         * @summary Get menu by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByDate(date: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Menu>>> {
            return MenuApiFp(configuration).getMenuByDate(date, options).then((request) => request(axios, basePath));
        },
        /**
         * Get menus created at the indicated dates. The dates format is timestamp in miliseconds
         * @summary Get menu by date between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Menu>>> {
            return MenuApiFp(configuration).getMenuByDateBetween(minDate, maxDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get one menu by the indicated id
         * @summary Get menu by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuById(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Menu>> {
            return MenuApiFp(configuration).getMenuById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get menus with the price indicated
         * @summary Get menu by price
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByPrice(price: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Menu>>> {
            return MenuApiFp(configuration).getMenuByPrice(price, options).then((request) => request(axios, basePath));
        },
        /**
         * Get menus between the two prices indicated.
         * @summary Get menu by price between
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByPriceBetween(minPrice: number, maxPrice: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Menu>>> {
            return MenuApiFp(configuration).getMenuByPriceBetween(minPrice, maxPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * Get menus with the score indicated. The score goes from 0 to 5.
         * @summary Get menu by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByScore(score: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Menu>>> {
            return MenuApiFp(configuration).getMenuByScore(score, options).then((request) => request(axios, basePath));
        },
        /**
         * Get menus between the two scores indicated. The score goes from 0 to 5.
         * @summary Get menu by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Menu>>> {
            return MenuApiFp(configuration).getMenuByScoreBetween(minScore, maxScore, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one menu
         * @summary Save menu
         * @param {MenuDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveMenu(body?: MenuDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Menu>> {
            return MenuApiFp(configuration).saveMenu(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing menu
         * @summary Update menu
         * @param {number} id id of the element
         * @param {MenuDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMenu(id: number, body?: MenuDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Menu>> {
            return MenuApiFp(configuration).updateMenu(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuApi - object-oriented interface
 * @export
 * @class MenuApi
 * @extends {BaseAPI}
 */
export class MenuApi extends BaseAPI {
    /**
     * Delete all menus
     * @summary Delete menu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async deleteAllMenus(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return MenuApiFp(this.configuration).deleteAllMenus(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an existing menu
     * @summary Delete menu by id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async deleteMenu(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return MenuApiFp(this.configuration).deleteMenu(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all menus
     * @summary Get all menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async getAllMenus(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Menu>>> {
        return MenuApiFp(this.configuration).getAllMenus(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get menus created at the indicated date. The date format is timestamp in miliseconds
     * @summary Get menu by date
     * @param {number} date creation date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async getMenuByDate(date: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Menu>>> {
        return MenuApiFp(this.configuration).getMenuByDate(date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get menus created at the indicated dates. The dates format is timestamp in miliseconds
     * @summary Get menu by date between
     * @param {number} minDate date from in timestamp miliseconds
     * @param {number} maxDate date to in timestamp miliseconds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async getMenuByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Menu>>> {
        return MenuApiFp(this.configuration).getMenuByDateBetween(minDate, maxDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get one menu by the indicated id
     * @summary Get menu by id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async getMenuById(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Menu>> {
        return MenuApiFp(this.configuration).getMenuById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get menus with the price indicated
     * @summary Get menu by price
     * @param {number} price 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async getMenuByPrice(price: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Menu>>> {
        return MenuApiFp(this.configuration).getMenuByPrice(price, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get menus between the two prices indicated.
     * @summary Get menu by price between
     * @param {number} minPrice 
     * @param {number} maxPrice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async getMenuByPriceBetween(minPrice: number, maxPrice: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Menu>>> {
        return MenuApiFp(this.configuration).getMenuByPriceBetween(minPrice, maxPrice, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get menus with the score indicated. The score goes from 0 to 5.
     * @summary Get menu by score
     * @param {number} score 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async getMenuByScore(score: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Menu>>> {
        return MenuApiFp(this.configuration).getMenuByScore(score, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get menus between the two scores indicated. The score goes from 0 to 5.
     * @summary Get menu by score between
     * @param {number} minScore 
     * @param {number} maxScore 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async getMenuByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Menu>>> {
        return MenuApiFp(this.configuration).getMenuByScoreBetween(minScore, maxScore, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Save one menu
     * @summary Save menu
     * @param {MenuDTO} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async saveMenu(body?: MenuDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Menu>> {
        return MenuApiFp(this.configuration).saveMenu(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing menu
     * @summary Update menu
     * @param {number} id id of the element
     * @param {MenuDTO} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public async updateMenu(id: number, body?: MenuDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Menu>> {
        return MenuApiFp(this.configuration).updateMenu(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
