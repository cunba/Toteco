/* tslint:disable */
/* eslint-disable */
/**
 * TOTECO API
 * API to manage publications about products (coffee, tea or toast) like a social media. The idea is to create a community that publishes photos of their toasts with coffee or tea adding the price and being able to rate the products and the establishments.
 *
 * OpenAPI spec version: 1.0
 * Contact: a25540@svalero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Establishment } from '../models';
import { EstablishmentDTO } from '../models';
import { Exception } from '../models';
/**
 * EstablishmentApi - axios parameter creator
 * @export
 */
export const EstablishmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete all establishments
         * @summary Delete establishments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllEstablishments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/establishments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing establishment
         * @summary Delete establishment by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEstablishment: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteEstablishment.');
            }
            const localVarPath = `/establishments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all establishments
         * @summary Get all establishments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEstablishments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/establishments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get establishments created at the indicated date. The date format is timestamp in miliseconds
         * @summary Get establishment by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstablishmentByDate: async (date: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling getEstablishmentByDate.');
            }
            const localVarPath = `/establishments/date/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get establishments created at the indicated dates. The dates format is timestamp in miliseconds
         * @summary Get establishment by date between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstablishmentByDateBetween: async (minDate: number, maxDate: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minDate' is not null or undefined
            if (minDate === null || minDate === undefined) {
                throw new RequiredError('minDate','Required parameter minDate was null or undefined when calling getEstablishmentByDateBetween.');
            }
            // verify required parameter 'maxDate' is not null or undefined
            if (maxDate === null || maxDate === undefined) {
                throw new RequiredError('maxDate','Required parameter maxDate was null or undefined when calling getEstablishmentByDateBetween.');
            }
            const localVarPath = `/establishments/date/between`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minDate !== undefined) {
                localVarQueryParameter['minDate'] = minDate;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['maxDate'] = maxDate;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get one establishment by the indicated id
         * @summary Get establishment by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstablishmentById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getEstablishmentById.');
            }
            const localVarPath = `/establishments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get establishments that belongs to the user indicated.
         * @summary Get establishment by user id
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstablishmentByName: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getEstablishmentByName.');
            }
            const localVarPath = `/establishment/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get establishments that are (or not) open.
         * @summary Get establishment by open
         * @param {boolean} open 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstablishmentByOpen: async (open: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'open' is not null or undefined
            if (open === null || open === undefined) {
                throw new RequiredError('open','Required parameter open was null or undefined when calling getEstablishmentByOpen.');
            }
            const localVarPath = `/establishment/open/{open}`
                .replace(`{${"open"}}`, encodeURIComponent(String(open)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get establishments with the score indicated. The score goes from 0 to 5.
         * @summary Get establishment by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstablishmentByScore: async (score: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'score' is not null or undefined
            if (score === null || score === undefined) {
                throw new RequiredError('score','Required parameter score was null or undefined when calling getEstablishmentByScore.');
            }
            const localVarPath = `/establishments/score/{score}`
                .replace(`{${"score"}}`, encodeURIComponent(String(score)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get establishments between the two scores indicated. The score goes from 0 to 5.
         * @summary Get establishment by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstablishmentByScoreBetween: async (minScore: number, maxScore: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minScore' is not null or undefined
            if (minScore === null || minScore === undefined) {
                throw new RequiredError('minScore','Required parameter minScore was null or undefined when calling getEstablishmentByScoreBetween.');
            }
            // verify required parameter 'maxScore' is not null or undefined
            if (maxScore === null || maxScore === undefined) {
                throw new RequiredError('maxScore','Required parameter maxScore was null or undefined when calling getEstablishmentByScoreBetween.');
            }
            const localVarPath = `/establishment/score/between`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minScore !== undefined) {
                localVarQueryParameter['minScore'] = minScore;
            }

            if (maxScore !== undefined) {
                localVarQueryParameter['maxScore'] = maxScore;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one establishment
         * @summary Save establishment
         * @param {EstablishmentDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEstablishment: async (body?: EstablishmentDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/establishments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing establishment
         * @summary Update establishment
         * @param {number} id id of the element
         * @param {EstablishmentDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEstablishment: async (id: number, body?: EstablishmentDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateEstablishment.');
            }
            const localVarPath = `/establishments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the score of the establishment indicated.
         * @summary Update establishment score
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEstablishmentScore: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateEstablishmentScore.');
            }
            const localVarPath = `/establishments/{id}/score`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EstablishmentApi - functional programming interface
 * @export
 */
export const EstablishmentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete all establishments
         * @summary Delete establishments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllEstablishments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).deleteAllEstablishments(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an existing establishment
         * @summary Delete establishment by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEstablishment(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).deleteEstablishment(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all establishments
         * @summary Get all establishments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEstablishments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Establishment>>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).getAllEstablishments(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get establishments created at the indicated date. The date format is timestamp in miliseconds
         * @summary Get establishment by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByDate(date: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Establishment>>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).getEstablishmentByDate(date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get establishments created at the indicated dates. The dates format is timestamp in miliseconds
         * @summary Get establishment by date between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Establishment>>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).getEstablishmentByDateBetween(minDate, maxDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get one establishment by the indicated id
         * @summary Get establishment by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Establishment>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).getEstablishmentById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get establishments that belongs to the user indicated.
         * @summary Get establishment by user id
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByName(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Establishment>>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).getEstablishmentByName(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get establishments that are (or not) open.
         * @summary Get establishment by open
         * @param {boolean} open 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByOpen(open: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Establishment>>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).getEstablishmentByOpen(open, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get establishments with the score indicated. The score goes from 0 to 5.
         * @summary Get establishment by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByScore(score: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Establishment>>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).getEstablishmentByScore(score, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get establishments between the two scores indicated. The score goes from 0 to 5.
         * @summary Get establishment by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Establishment>>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).getEstablishmentByScoreBetween(minScore, maxScore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Save one establishment
         * @summary Save establishment
         * @param {EstablishmentDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveEstablishment(body?: EstablishmentDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Establishment>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).saveEstablishment(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing establishment
         * @summary Update establishment
         * @param {number} id id of the element
         * @param {EstablishmentDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEstablishment(id: number, body?: EstablishmentDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Establishment>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).updateEstablishment(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the score of the establishment indicated.
         * @summary Update establishment score
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEstablishmentScore(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await EstablishmentApiAxiosParamCreator(configuration).updateEstablishmentScore(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EstablishmentApi - factory interface
 * @export
 */
export const EstablishmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete all establishments
         * @summary Delete establishments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllEstablishments(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return EstablishmentApiFp(configuration).deleteAllEstablishments(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing establishment
         * @summary Delete establishment by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEstablishment(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return EstablishmentApiFp(configuration).deleteEstablishment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all establishments
         * @summary Get all establishments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEstablishments(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Establishment>>> {
            return EstablishmentApiFp(configuration).getAllEstablishments(options).then((request) => request(axios, basePath));
        },
        /**
         * Get establishments created at the indicated date. The date format is timestamp in miliseconds
         * @summary Get establishment by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByDate(date: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Establishment>>> {
            return EstablishmentApiFp(configuration).getEstablishmentByDate(date, options).then((request) => request(axios, basePath));
        },
        /**
         * Get establishments created at the indicated dates. The dates format is timestamp in miliseconds
         * @summary Get establishment by date between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Establishment>>> {
            return EstablishmentApiFp(configuration).getEstablishmentByDateBetween(minDate, maxDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get one establishment by the indicated id
         * @summary Get establishment by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentById(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Establishment>> {
            return EstablishmentApiFp(configuration).getEstablishmentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get establishments that belongs to the user indicated.
         * @summary Get establishment by user id
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByName(name: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Establishment>>> {
            return EstablishmentApiFp(configuration).getEstablishmentByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get establishments that are (or not) open.
         * @summary Get establishment by open
         * @param {boolean} open 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByOpen(open: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Establishment>>> {
            return EstablishmentApiFp(configuration).getEstablishmentByOpen(open, options).then((request) => request(axios, basePath));
        },
        /**
         * Get establishments with the score indicated. The score goes from 0 to 5.
         * @summary Get establishment by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByScore(score: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Establishment>>> {
            return EstablishmentApiFp(configuration).getEstablishmentByScore(score, options).then((request) => request(axios, basePath));
        },
        /**
         * Get establishments between the two scores indicated. The score goes from 0 to 5.
         * @summary Get establishment by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstablishmentByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Establishment>>> {
            return EstablishmentApiFp(configuration).getEstablishmentByScoreBetween(minScore, maxScore, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one establishment
         * @summary Save establishment
         * @param {EstablishmentDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveEstablishment(body?: EstablishmentDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Establishment>> {
            return EstablishmentApiFp(configuration).saveEstablishment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing establishment
         * @summary Update establishment
         * @param {number} id id of the element
         * @param {EstablishmentDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEstablishment(id: number, body?: EstablishmentDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Establishment>> {
            return EstablishmentApiFp(configuration).updateEstablishment(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the score of the establishment indicated.
         * @summary Update establishment score
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEstablishmentScore(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return EstablishmentApiFp(configuration).updateEstablishmentScore(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EstablishmentApi - object-oriented interface
 * @export
 * @class EstablishmentApi
 * @extends {BaseAPI}
 */
export class EstablishmentApi extends BaseAPI {
    /**
     * Delete all establishments
     * @summary Delete establishments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async deleteAllEstablishments(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return EstablishmentApiFp(this.configuration).deleteAllEstablishments(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an existing establishment
     * @summary Delete establishment by id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async deleteEstablishment(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return EstablishmentApiFp(this.configuration).deleteEstablishment(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all establishments
     * @summary Get all establishments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async getAllEstablishments(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Establishment>>> {
        return EstablishmentApiFp(this.configuration).getAllEstablishments(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get establishments created at the indicated date. The date format is timestamp in miliseconds
     * @summary Get establishment by date
     * @param {number} date creation date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async getEstablishmentByDate(date: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Establishment>>> {
        return EstablishmentApiFp(this.configuration).getEstablishmentByDate(date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get establishments created at the indicated dates. The dates format is timestamp in miliseconds
     * @summary Get establishment by date between
     * @param {number} minDate date from in timestamp miliseconds
     * @param {number} maxDate date to in timestamp miliseconds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async getEstablishmentByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Establishment>>> {
        return EstablishmentApiFp(this.configuration).getEstablishmentByDateBetween(minDate, maxDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get one establishment by the indicated id
     * @summary Get establishment by id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async getEstablishmentById(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Establishment>> {
        return EstablishmentApiFp(this.configuration).getEstablishmentById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get establishments that belongs to the user indicated.
     * @summary Get establishment by user id
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async getEstablishmentByName(name: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Establishment>>> {
        return EstablishmentApiFp(this.configuration).getEstablishmentByName(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get establishments that are (or not) open.
     * @summary Get establishment by open
     * @param {boolean} open 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async getEstablishmentByOpen(open: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Establishment>>> {
        return EstablishmentApiFp(this.configuration).getEstablishmentByOpen(open, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get establishments with the score indicated. The score goes from 0 to 5.
     * @summary Get establishment by score
     * @param {number} score 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async getEstablishmentByScore(score: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Establishment>>> {
        return EstablishmentApiFp(this.configuration).getEstablishmentByScore(score, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get establishments between the two scores indicated. The score goes from 0 to 5.
     * @summary Get establishment by score between
     * @param {number} minScore 
     * @param {number} maxScore 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async getEstablishmentByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Establishment>>> {
        return EstablishmentApiFp(this.configuration).getEstablishmentByScoreBetween(minScore, maxScore, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Save one establishment
     * @summary Save establishment
     * @param {EstablishmentDTO} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async saveEstablishment(body?: EstablishmentDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Establishment>> {
        return EstablishmentApiFp(this.configuration).saveEstablishment(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing establishment
     * @summary Update establishment
     * @param {number} id id of the element
     * @param {EstablishmentDTO} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async updateEstablishment(id: number, body?: EstablishmentDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Establishment>> {
        return EstablishmentApiFp(this.configuration).updateEstablishment(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the score of the establishment indicated.
     * @summary Update establishment score
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EstablishmentApi
     */
    public async updateEstablishmentScore(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return EstablishmentApiFp(this.configuration).updateEstablishmentScore(id, options).then((request) => request(this.axios, this.basePath));
    }
}
