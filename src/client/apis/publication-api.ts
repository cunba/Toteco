/* tslint:disable */
/* eslint-disable */
/**
 * TOTECO API
 * API to manage publications about products (coffee, tea or toast) like a social media. The idea is to create a community that publishes photos of their toasts with coffee or tea adding the price and being able to rate the products and the establishments.
 *
 * OpenAPI spec version: 1.0
 * Contact: a25540@svalero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Exception } from '../models';
import { Publication } from '../models';
import { PublicationDTO } from '../models';
/**
 * PublicationApi - axios parameter creator
 * @export
 */
export const PublicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete all publications
         * @summary Delete publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllPublications: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing publication
         * @summary Delete publication by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublication: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePublication.');
            }
            const localVarPath = `/publications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all publications
         * @summary Get all publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublications: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get publications created at the indicated date. The date format is timestamp in miliseconds
         * @summary Get publication by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationByDate: async (date: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling getPublicationByDate.');
            }
            const localVarPath = `/publications/date/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get publications created at the indicated dates. The dates format is timestamp in miliseconds
         * @summary Get publication by date between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationByDateBetween: async (minDate: number, maxDate: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minDate' is not null or undefined
            if (minDate === null || minDate === undefined) {
                throw new RequiredError('minDate','Required parameter minDate was null or undefined when calling getPublicationByDateBetween.');
            }
            // verify required parameter 'maxDate' is not null or undefined
            if (maxDate === null || maxDate === undefined) {
                throw new RequiredError('maxDate','Required parameter maxDate was null or undefined when calling getPublicationByDateBetween.');
            }
            const localVarPath = `/publications/date/between`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minDate !== undefined) {
                localVarQueryParameter['minDate'] = minDate;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['maxDate'] = maxDate;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get publications that belongs to the between dates, the between price and the between scores indicateds.
         * @summary Get publication by date, price and score between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationByDateBetweenAndPriceBetweenAndScoreBetween: async (minDate: number, maxDate: number, minPrice: number, maxPrice: number, minScore: number, maxScore: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minDate' is not null or undefined
            if (minDate === null || minDate === undefined) {
                throw new RequiredError('minDate','Required parameter minDate was null or undefined when calling getPublicationByDateBetweenAndPriceBetweenAndScoreBetween.');
            }
            // verify required parameter 'maxDate' is not null or undefined
            if (maxDate === null || maxDate === undefined) {
                throw new RequiredError('maxDate','Required parameter maxDate was null or undefined when calling getPublicationByDateBetweenAndPriceBetweenAndScoreBetween.');
            }
            // verify required parameter 'minPrice' is not null or undefined
            if (minPrice === null || minPrice === undefined) {
                throw new RequiredError('minPrice','Required parameter minPrice was null or undefined when calling getPublicationByDateBetweenAndPriceBetweenAndScoreBetween.');
            }
            // verify required parameter 'maxPrice' is not null or undefined
            if (maxPrice === null || maxPrice === undefined) {
                throw new RequiredError('maxPrice','Required parameter maxPrice was null or undefined when calling getPublicationByDateBetweenAndPriceBetweenAndScoreBetween.');
            }
            // verify required parameter 'minScore' is not null or undefined
            if (minScore === null || minScore === undefined) {
                throw new RequiredError('minScore','Required parameter minScore was null or undefined when calling getPublicationByDateBetweenAndPriceBetweenAndScoreBetween.');
            }
            // verify required parameter 'maxScore' is not null or undefined
            if (maxScore === null || maxScore === undefined) {
                throw new RequiredError('maxScore','Required parameter maxScore was null or undefined when calling getPublicationByDateBetweenAndPriceBetweenAndScoreBetween.');
            }
            const localVarPath = `/publications/date/price/score/between`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minDate !== undefined) {
                localVarQueryParameter['minDate'] = minDate;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['maxDate'] = maxDate;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['minPrice'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['maxPrice'] = maxPrice;
            }

            if (minScore !== undefined) {
                localVarQueryParameter['minScore'] = minScore;
            }

            if (maxScore !== undefined) {
                localVarQueryParameter['maxScore'] = maxScore;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get publications that belongs to the establishment indicated
         * @summary Get publication by establishment id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationByEstablishmentId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPublicationByEstablishmentId.');
            }
            const localVarPath = `/publications/establishment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get one publication by the indicated id
         * @summary Get publication by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPublicationById.');
            }
            const localVarPath = `/publications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get publications with the price indicated
         * @summary Get publication by price
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationByPrice: async (price: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'price' is not null or undefined
            if (price === null || price === undefined) {
                throw new RequiredError('price','Required parameter price was null or undefined when calling getPublicationByPrice.');
            }
            const localVarPath = `/publications/price/{price}`
                .replace(`{${"price"}}`, encodeURIComponent(String(price)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get publications between the two prices indicated.
         * @summary Get publication by price between
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationByPriceBetween: async (minPrice: number, maxPrice: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minPrice' is not null or undefined
            if (minPrice === null || minPrice === undefined) {
                throw new RequiredError('minPrice','Required parameter minPrice was null or undefined when calling getPublicationByPriceBetween.');
            }
            // verify required parameter 'maxPrice' is not null or undefined
            if (maxPrice === null || maxPrice === undefined) {
                throw new RequiredError('maxPrice','Required parameter maxPrice was null or undefined when calling getPublicationByPriceBetween.');
            }
            const localVarPath = `/publications/price/between`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minPrice !== undefined) {
                localVarQueryParameter['minPrice'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['maxPrice'] = maxPrice;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get publications that belongs to the product type indicated.
         * @summary Get publication by product type
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationByProductType: async (type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getPublicationByProductType.');
            }
            const localVarPath = `/publications/type/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get publications between the two scores indicated. The score goes from 0 to 5.
         * @summary Get publication by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationByScoreBetween: async (minScore: number, maxScore: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minScore' is not null or undefined
            if (minScore === null || minScore === undefined) {
                throw new RequiredError('minScore','Required parameter minScore was null or undefined when calling getPublicationByScoreBetween.');
            }
            // verify required parameter 'maxScore' is not null or undefined
            if (maxScore === null || maxScore === undefined) {
                throw new RequiredError('maxScore','Required parameter maxScore was null or undefined when calling getPublicationByScoreBetween.');
            }
            const localVarPath = `/publications/score/between`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minScore !== undefined) {
                localVarQueryParameter['minScore'] = minScore;
            }

            if (maxScore !== undefined) {
                localVarQueryParameter['maxScore'] = maxScore;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get publications that belongs to the user indicated.
         * @summary Get publication by user id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationByUserId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPublicationByUserId.');
            }
            const localVarPath = `/publications/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get publications with the score indicated. The score goes from 0 to 5.
         * @summary Get publication by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationsByScore: async (score: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'score' is not null or undefined
            if (score === null || score === undefined) {
                throw new RequiredError('score','Required parameter score was null or undefined when calling getPublicationsByScore.');
            }
            const localVarPath = `/publications/score/{score}`
                .replace(`{${"score"}}`, encodeURIComponent(String(score)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one publication
         * @summary Save publication
         * @param {PublicationDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savePublication: async (body?: PublicationDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing publication
         * @summary Update publication
         * @param {number} id id of the element
         * @param {PublicationDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublication: async (id: number, body?: PublicationDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePublication.');
            }
            const localVarPath = `/publications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the price and the score of the publication indicated.
         * @summary Update publication price and score
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicationPriceAndScore: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePublicationPriceAndScore.');
            }
            const localVarPath = `/publications/{id}/price-score`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicationApi - functional programming interface
 * @export
 */
export const PublicationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete all publications
         * @summary Delete publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllPublications(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).deleteAllPublications(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an existing publication
         * @summary Delete publication by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePublication(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).deletePublication(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all publications
         * @summary Get all publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPublications(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getAllPublications(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get publications created at the indicated date. The date format is timestamp in miliseconds
         * @summary Get publication by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByDate(date: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getPublicationByDate(date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get publications created at the indicated dates. The dates format is timestamp in miliseconds
         * @summary Get publication by date between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getPublicationByDateBetween(minDate, maxDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get publications that belongs to the between dates, the between price and the between scores indicateds.
         * @summary Get publication by date, price and score between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByDateBetweenAndPriceBetweenAndScoreBetween(minDate: number, maxDate: number, minPrice: number, maxPrice: number, minScore: number, maxScore: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getPublicationByDateBetweenAndPriceBetweenAndScoreBetween(minDate, maxDate, minPrice, maxPrice, minScore, maxScore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get publications that belongs to the establishment indicated
         * @summary Get publication by establishment id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByEstablishmentId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getPublicationByEstablishmentId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get one publication by the indicated id
         * @summary Get publication by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Publication>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getPublicationById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get publications with the price indicated
         * @summary Get publication by price
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByPrice(price: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getPublicationByPrice(price, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get publications between the two prices indicated.
         * @summary Get publication by price between
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByPriceBetween(minPrice: number, maxPrice: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getPublicationByPriceBetween(minPrice, maxPrice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get publications that belongs to the product type indicated.
         * @summary Get publication by product type
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByProductType(type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getPublicationByProductType(type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get publications between the two scores indicated. The score goes from 0 to 5.
         * @summary Get publication by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getPublicationByScoreBetween(minScore, maxScore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get publications that belongs to the user indicated.
         * @summary Get publication by user id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByUserId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getPublicationByUserId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get publications with the score indicated. The score goes from 0 to 5.
         * @summary Get publication by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationsByScore(score: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Publication>>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).getPublicationsByScore(score, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Save one publication
         * @summary Save publication
         * @param {PublicationDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async savePublication(body?: PublicationDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Publication>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).savePublication(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing publication
         * @summary Update publication
         * @param {number} id id of the element
         * @param {PublicationDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePublication(id: number, body?: PublicationDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Publication>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).updatePublication(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the price and the score of the publication indicated.
         * @summary Update publication price and score
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePublicationPriceAndScore(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PublicationApiAxiosParamCreator(configuration).updatePublicationPriceAndScore(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PublicationApi - factory interface
 * @export
 */
export const PublicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete all publications
         * @summary Delete publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllPublications(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PublicationApiFp(configuration).deleteAllPublications(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing publication
         * @summary Delete publication by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePublication(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PublicationApiFp(configuration).deletePublication(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all publications
         * @summary Get all publications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPublications(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationApiFp(configuration).getAllPublications(options).then((request) => request(axios, basePath));
        },
        /**
         * Get publications created at the indicated date. The date format is timestamp in miliseconds
         * @summary Get publication by date
         * @param {number} date creation date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByDate(date: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationApiFp(configuration).getPublicationByDate(date, options).then((request) => request(axios, basePath));
        },
        /**
         * Get publications created at the indicated dates. The dates format is timestamp in miliseconds
         * @summary Get publication by date between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationApiFp(configuration).getPublicationByDateBetween(minDate, maxDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get publications that belongs to the between dates, the between price and the between scores indicateds.
         * @summary Get publication by date, price and score between
         * @param {number} minDate date from in timestamp miliseconds
         * @param {number} maxDate date to in timestamp miliseconds
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByDateBetweenAndPriceBetweenAndScoreBetween(minDate: number, maxDate: number, minPrice: number, maxPrice: number, minScore: number, maxScore: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationApiFp(configuration).getPublicationByDateBetweenAndPriceBetweenAndScoreBetween(minDate, maxDate, minPrice, maxPrice, minScore, maxScore, options).then((request) => request(axios, basePath));
        },
        /**
         * Get publications that belongs to the establishment indicated
         * @summary Get publication by establishment id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByEstablishmentId(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationApiFp(configuration).getPublicationByEstablishmentId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get one publication by the indicated id
         * @summary Get publication by id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationById(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Publication>> {
            return PublicationApiFp(configuration).getPublicationById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get publications with the price indicated
         * @summary Get publication by price
         * @param {number} price 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByPrice(price: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationApiFp(configuration).getPublicationByPrice(price, options).then((request) => request(axios, basePath));
        },
        /**
         * Get publications between the two prices indicated.
         * @summary Get publication by price between
         * @param {number} minPrice 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByPriceBetween(minPrice: number, maxPrice: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationApiFp(configuration).getPublicationByPriceBetween(minPrice, maxPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * Get publications that belongs to the product type indicated.
         * @summary Get publication by product type
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByProductType(type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationApiFp(configuration).getPublicationByProductType(type, options).then((request) => request(axios, basePath));
        },
        /**
         * Get publications between the two scores indicated. The score goes from 0 to 5.
         * @summary Get publication by score between
         * @param {number} minScore 
         * @param {number} maxScore 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationApiFp(configuration).getPublicationByScoreBetween(minScore, maxScore, options).then((request) => request(axios, basePath));
        },
        /**
         * Get publications that belongs to the user indicated.
         * @summary Get publication by user id
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationByUserId(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationApiFp(configuration).getPublicationByUserId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get publications with the score indicated. The score goes from 0 to 5.
         * @summary Get publication by score
         * @param {number} score 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicationsByScore(score: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Publication>>> {
            return PublicationApiFp(configuration).getPublicationsByScore(score, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one publication
         * @summary Save publication
         * @param {PublicationDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async savePublication(body?: PublicationDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Publication>> {
            return PublicationApiFp(configuration).savePublication(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing publication
         * @summary Update publication
         * @param {number} id id of the element
         * @param {PublicationDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePublication(id: number, body?: PublicationDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Publication>> {
            return PublicationApiFp(configuration).updatePublication(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the price and the score of the publication indicated.
         * @summary Update publication price and score
         * @param {number} id id of the element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePublicationPriceAndScore(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PublicationApiFp(configuration).updatePublicationPriceAndScore(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicationApi - object-oriented interface
 * @export
 * @class PublicationApi
 * @extends {BaseAPI}
 */
export class PublicationApi extends BaseAPI {
    /**
     * Delete all publications
     * @summary Delete publications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async deleteAllPublications(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PublicationApiFp(this.configuration).deleteAllPublications(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an existing publication
     * @summary Delete publication by id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async deletePublication(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PublicationApiFp(this.configuration).deletePublication(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all publications
     * @summary Get all publications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getAllPublications(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationApiFp(this.configuration).getAllPublications(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get publications created at the indicated date. The date format is timestamp in miliseconds
     * @summary Get publication by date
     * @param {number} date creation date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getPublicationByDate(date: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationApiFp(this.configuration).getPublicationByDate(date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get publications created at the indicated dates. The dates format is timestamp in miliseconds
     * @summary Get publication by date between
     * @param {number} minDate date from in timestamp miliseconds
     * @param {number} maxDate date to in timestamp miliseconds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getPublicationByDateBetween(minDate: number, maxDate: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationApiFp(this.configuration).getPublicationByDateBetween(minDate, maxDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get publications that belongs to the between dates, the between price and the between scores indicateds.
     * @summary Get publication by date, price and score between
     * @param {number} minDate date from in timestamp miliseconds
     * @param {number} maxDate date to in timestamp miliseconds
     * @param {number} minPrice 
     * @param {number} maxPrice 
     * @param {number} minScore 
     * @param {number} maxScore 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getPublicationByDateBetweenAndPriceBetweenAndScoreBetween(minDate: number, maxDate: number, minPrice: number, maxPrice: number, minScore: number, maxScore: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationApiFp(this.configuration).getPublicationByDateBetweenAndPriceBetweenAndScoreBetween(minDate, maxDate, minPrice, maxPrice, minScore, maxScore, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get publications that belongs to the establishment indicated
     * @summary Get publication by establishment id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getPublicationByEstablishmentId(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationApiFp(this.configuration).getPublicationByEstablishmentId(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get one publication by the indicated id
     * @summary Get publication by id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getPublicationById(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Publication>> {
        return PublicationApiFp(this.configuration).getPublicationById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get publications with the price indicated
     * @summary Get publication by price
     * @param {number} price 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getPublicationByPrice(price: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationApiFp(this.configuration).getPublicationByPrice(price, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get publications between the two prices indicated.
     * @summary Get publication by price between
     * @param {number} minPrice 
     * @param {number} maxPrice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getPublicationByPriceBetween(minPrice: number, maxPrice: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationApiFp(this.configuration).getPublicationByPriceBetween(minPrice, maxPrice, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get publications that belongs to the product type indicated.
     * @summary Get publication by product type
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getPublicationByProductType(type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationApiFp(this.configuration).getPublicationByProductType(type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get publications between the two scores indicated. The score goes from 0 to 5.
     * @summary Get publication by score between
     * @param {number} minScore 
     * @param {number} maxScore 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getPublicationByScoreBetween(minScore: number, maxScore: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationApiFp(this.configuration).getPublicationByScoreBetween(minScore, maxScore, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get publications that belongs to the user indicated.
     * @summary Get publication by user id
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getPublicationByUserId(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationApiFp(this.configuration).getPublicationByUserId(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get publications with the score indicated. The score goes from 0 to 5.
     * @summary Get publication by score
     * @param {number} score 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async getPublicationsByScore(score: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Publication>>> {
        return PublicationApiFp(this.configuration).getPublicationsByScore(score, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Save one publication
     * @summary Save publication
     * @param {PublicationDTO} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async savePublication(body?: PublicationDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Publication>> {
        return PublicationApiFp(this.configuration).savePublication(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing publication
     * @summary Update publication
     * @param {number} id id of the element
     * @param {PublicationDTO} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async updatePublication(id: number, body?: PublicationDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Publication>> {
        return PublicationApiFp(this.configuration).updatePublication(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the price and the score of the publication indicated.
     * @summary Update publication price and score
     * @param {number} id id of the element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationApi
     */
    public async updatePublicationPriceAndScore(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PublicationApiFp(this.configuration).updatePublicationPriceAndScore(id, options).then((request) => request(this.axios, this.basePath));
    }
}
